(
    (define a (list 1 2 3 5 9))
    (define map (lambda (g x . y)(
        (define map (lambda (g x . y)
            (cons
                (g (car x) (car y))
                (if (null? (cdr x))
                    (quote ())
                    (map g (cdr x) (if (null? y) (quote ()) (cdr y)))))))
        ((map g x y))
                )))
    (define x 3)
    (define y 5)
    (define d 5)
    (define-macro fluid-let
      (lambda (xexe . body)
        (let ((xx (map car xexe))
              (ee (map (lambda (x) (car (cdr x))) xexe))
              (old-xx (map (lambda (ig) (gensym)) xexe))
              (result (gensym)))
          (`(let ,(map (lambda (old-x x) (`(, old-x , x)))
                      old-xx xx)
             ,@ (map (lambda (x e)
                      (`(set! , x , e)))
                    xx ee)
             (let ((, result (begin ,@ body)))
               ,@(map (lambda (x old-x)
                        (`(set! , x , old-x)))
                      xx old-xx)
               , result))))))
    (display (fluid-let ((x 9) (y (+ y 1)) (d 8))
      (+ x y)))
)